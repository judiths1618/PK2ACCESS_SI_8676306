'''--------plot gantt chart-------'''
import pandas as pd
import numpy as np
import plotly.plotly as py
import plotly.figure_factory as ff
import datetime, random
from workflows import singlewl


num_workflow = 5  # number of workflows
num_mc = 7  # number of machines
num_task = 30  # number of tasks in each workflow
dataset_pos = "D://PycharmProjects//plan-b//data//"

pos = 'D://PycharmProjects/plan-b/workflows/'
files = ['CyberShake_30.xml', 'Epigenomics_24.xml', 'Inspiral_30.xml',
         'Montage_25.xml', 'Sipht_29.xml']

w1 = singlewl.SingleWorkflow (pos + files[0])
w2 = singlewl.SingleWorkflow (pos + files[1])
w3 = singlewl.SingleWorkflow (pos + files[2])
w4 = singlewl.SingleWorkflow (pos + files[3])
w5 = singlewl.SingleWorkflow (pos + files[4])
W = [w1, w2, w3, w4, w5]

nodes1 = w1.tasks ()
nodes2 = w2.tasks ()
nodes3 = w3.tasks ()
nodes4 = w4.tasks ()
nodes5 = w5.tasks ()
N = [nodes1, nodes2, nodes3, nodes4, nodes5]

TASKS = []
for i, ns in enumerate (N):
    for j in range (30):
        if j <= len (ns) - 1:
            TASKS.append (ns[j])
        elif j > len (ns) - 1:
            TASKS.append ({'id': 'default', 'name': 'null', 'namespace': 'null'})
# print(NSGA_II_TASKS)
# print(len(NSGA_II_TASKS))

workflows = ["CyberShake", "Genome", "LIGO", "Montage", "SIPHT"]
tTypes = ['tType1', 'tType2', 'tType3', 'tType4', 'tType5']
vms = ['t3.medium', 't3.large', 'c5.large', 'm5.large', 'c5n.large', 'r5a.large', 'a1.4xlarge']

# pt_tmp = pd.read_excel (dataset_pos+"WSP_dataset.xlsx", sheet_name="Processing Time", index_col=[0])
ms_tmp = pd.read_excel (dataset_pos + "WSP_dataset.xlsx", sheet_name="Machines Sequence", index_col=[0])
mp_tmp = pd.read_excel (dataset_pos + "WSP_dataset.xlsx", sheet_name="Machines Price", index_col=[0])
ts_tmp = pd.read_excel (dataset_pos + "WSP_dataset.xlsx", sheet_name="Task Size", index_col=[0])
scp_tmp = pd.read_excel (dataset_pos + "WSP_dataset.xlsx", sheet_name="Single-core Performance", index_col=[0])
mcp_tmp = pd.read_excel (dataset_pos + "WSP_dataset.xlsx", sheet_name="Multi-core Performance", index_col=[0])

ms = [list (map (int, ms_tmp.iloc[i])) for i in range (num_workflow)]
price = [list (map (float, mp_tmp.iloc[i])) for i in range (num_mc)]
ts = [list (map (int, ts_tmp.iloc[i])) for i in range (num_workflow)]
scp = [list (map (float, scp_tmp.iloc[i])) for i in range (num_mc)]
mcp = [list (map (float, mcp_tmp.iloc[i])) for i in range (num_mc)]

time_scp = np.zeros ((7, 5))
cost_scp = np.zeros ((7, 5))
time_mcp = np.zeros ((7, 5))
cost_mcp = np.zeros ((7, 5))
for j, vm in enumerate (vms):
    for i, t in enumerate (N):
        time_scp[j][i] = round (20000 / scp[j][i], 6)
        cost_scp[j][i] = round (20000 / scp[j][i] * price[j][0], 6)
        time_mcp[j][i] = round (30000 / mcp[j][i], 6)
        cost_mcp[j][i] = round (30000 / mcp[j][i] * price[j][0], 6)

mopso =[[0, 1, 0.0, 6.644518], [1, 0, 0.0, 3.804692], [2, 3, 0.0, 6.450226], [3, 1, 6.644518, 12.55003], [4, 2, 0.0, 6.077796], [3, 3, 6.450226, 13.335698], [4, 2, 6.077796, 12.155592], [3, 5, 0.0, 6.10998], [4, 2, 12.155592, 18.233388], [3, 6, 0.0, 5.930026], [4, 3, 13.335698, 21.563893], [3, 2, 18.233388, 24.046215000000004], [4, 1, 12.55003, 18.703876], [2, 3, 21.563893, 28.014119], [3, 0, 3.804692, 8.014627], [4, 3, 28.014119, 36.242314], [3, 6, 5.930026, 11.860052], [4, 2, 24.046215000000004, 30.124011000000003], [3, 6, 11.860052, 17.790078], [4, 5, 6.10998, 12.494317], [3, 1, 18.703876, 24.609388000000003], [4, 2, 30.124011000000003, 36.201807], [3, 6, 36.201807, 42.131833], [4, 0, 42.131833, 46.059049], [3, 0, 46.059049, 50.268984], [4, 0, 50.268984, 54.196200000000005], [3, 4, 46.059049, 52.472046], [4, 5, 42.131833, 48.51617], [3, 2, 48.51617, 54.328997], [4, 3, 36.242314, 44.470509], [0, 0, 54.196200000000005, 58.241507000000006], [1, 3, 44.470509, 50.908277], [1, 0, 58.241507000000006, 62.04619900000001], [1, 0, 62.04619900000001, 65.850891], [1, 0, 65.850891, 69.65558300000001], [1, 6, 50.908277, 57.058339], [2, 1, 62.04619900000001, 67.616195], [2, 4, 52.472046, 58.54492], [2, 6, 57.058339, 62.455963999999994], [2, 5, 65.850891, 71.61236600000001], [2, 1, 67.616195, 73.18619100000001], [3, 3, 65.850891, 72.73636300000001], [3, 2, 65.850891, 71.663718], [3, 4, 71.663718, 78.07671500000001], [3, 1, 78.07671500000001, 83.98222700000001], [3, 2, 83.98222700000001, 89.79505400000001], [4, 4, 83.98222700000001, 90.60182100000002], [4, 0, 83.98222700000001, 87.90944300000001], [4, 3, 83.98222700000001, 92.21042200000001], [4, 6, 83.98222700000001, 90.05633100000001], [4, 6, 90.05633100000001, 96.13043500000002], [0, 0, 96.13043500000002, 100.17574200000001], [1, 6, 100.17574200000001, 106.32580400000002], [2, 0, 106.32580400000002, 110.22342600000002], [0, 0, 110.22342600000002, 114.26873300000001], [0, 1, 83.98222700000001, 90.62674500000001], [0, 1, 90.62674500000001, 97.27126300000002], [0, 5, 71.61236600000001, 78.60374300000001], [0, 0, 114.26873300000001, 118.31404], [0, 1, 97.27126300000002, 103.91578100000002], [0, 4, 90.60182100000002, 97.77199300000001], [1, 3, 114.26873300000001, 120.70650100000002], [1, 1, 103.91578100000002, 110.03198900000002], [1, 1, 110.03198900000002, 116.14819700000002], [1, 4, 97.77199300000001, 104.453507], [1, 3, 120.70650100000002, 127.14426900000002], [1, 6, 106.32580400000002, 112.47586600000002], [1, 2, 97.77199300000001, 104.03373400000001], [2, 5, 104.03373400000001, 109.79520900000001], [3, 3, 127.14426900000002, 134.02974100000003], [3, 6, 112.47586600000002, 118.40589200000002], [3, 3, 134.02974100000003, 140.91521300000002], [3, 5, 109.79520900000001, 115.90518900000001], [3, 0, 118.31404, 122.52397500000001], [3, 6, 118.40589200000002, 124.33591800000002], [3, 3, 140.91521300000002, 147.80068500000002], [1, 2, 134.02974100000003, 140.29148200000003], [1, 0, 122.52397500000001, 126.32866700000001], [1, 4, 140.91521300000002, 147.59672700000002], [1, 6, 124.33591800000002, 130.48598], [1, 6, 130.48598, 136.636042], [1, 0, 126.32866700000001, 130.133359], [1, 5, 147.80068500000002, 154.45847500000002], [2, 4, 154.45847500000002, 160.53134900000003], [0, 3, 147.80068500000002, 153.879712], [0, 6, 153.879712, 160.528648], [0, 0, 153.879712, 157.92501900000002], [0, 3, 153.879712, 159.958739], [0, 4, 160.53134900000003, 167.70152100000004], [1, 6, 160.528648, 166.67871], [1, 0, 160.528648, 164.33334], [1, 2, 157.92501900000002, 164.18676000000002], [1, 0, 164.33334, 168.13803199999998], [1, 1, 167.70152100000004, 173.81772900000004], [1, 0, 168.13803199999998, 171.94272399999997], [1, 0, 171.94272399999997, 175.74741599999996], [1, 0, 175.74741599999996, 179.55210799999995], [1, 1, 173.81772900000004, 179.93393700000004], [2, 0, 179.55210799999995, 183.44972999999996], [3, 5, 171.94272399999997, 178.05270399999998], [4, 1, 179.93393700000004, 186.08778300000003], [4, 0, 183.44972999999996, 187.37694599999995], [4, 4, 179.93393700000004, 186.55353100000005], [4, 3, 183.44972999999996, 191.67792499999996], [4, 2, 178.05270399999998, 184.13049999999998], [0, 4, 186.55353100000005, 193.72370300000006], [1, 6, 193.72370300000006, 199.87376500000005], [2, 6, 199.87376500000005, 205.27139000000005], [3, 0, 187.37694599999995, 191.58688099999995], [0, 6, 205.27139000000005, 211.92032600000005], [1, 3, 191.67792499999996, 198.11569299999996], [1, 0, 198.11569299999996, 201.92038499999995], [1, 0, 201.92038499999995, 205.72507699999994], [1, 6, 211.92032600000005, 218.07038800000004], [1, 1, 218.07038800000004, 224.18659600000004], [1, 4, 198.11569299999996, 204.79720699999996], [1, 6, 218.07038800000004, 224.22045000000003], [1, 0, 205.72507699999994, 209.52976899999993], [1, 0, 209.52976899999993, 213.33446099999992], [1, 1, 224.18659600000004, 230.30280400000004], [1, 2, 230.30280400000004, 236.56454500000004], [1, 1, 230.30280400000004, 236.41901200000004], [1, 0, 236.41901200000004, 240.22370400000003], [1, 4, 240.22370400000003, 246.90521800000002], [1, 0, 240.22370400000003, 244.02839600000001], [1, 2, 244.02839600000001, 250.29013700000002], [1, 0, 244.02839600000001, 247.833088], [2, 0, 247.833088, 251.73071000000002], [3, 3, 236.41901200000004, 243.30448400000003], [4, 0, 251.73071000000002, 255.657926], [0, 2, 250.29013700000002, 256.91997100000003], [1, 0, 256.91997100000003, 260.724663], [2, 2, 256.91997100000003, 262.348853], [3, 5, 262.348853, 268.458833], [4, 0, 260.724663, 264.651879], [0, 1, 264.651879, 271.296397], [1, 0, 264.651879, 268.456571], [2, 6, 268.456571, 273.854196]]

num_job = 5  # number of jobs
num_mc = 7  # number of machines
m_keys = [j + 1 for j in range (num_mc)]
j_keys = [j for j in range (num_job)]
df = []

MOPSO_record=[]
for k in mopso:
    start_time = str(datetime.timedelta(seconds=k[2]))
    end_time=str(datetime.timedelta(seconds=k[3]))
    MOPSO_record.append((k[0], k[1], [start_time, end_time]))
print(len(MOPSO_record))

for m in m_keys:
    for j in j_keys:
        for i in MOPSO_record:
            if (m, j) == (i[1], i[0]):
                # print (i[2], m, j)
                # df.append (dict (Task='Machine %s' % (m), Start='2018-12-22 %s' % (str (i[2][0])),
                #          Finish='2018-12-22 %s' % (str (i[2][1])), Resource='Workflow %s' % (j + 1)))
                df.append (dict (Task=vms[m - 1], Start='2018-12-22 %s' % (str (i[2][0])),
                             Finish='2018-12-22 %s' % (str (i[2][1])), Resource='Workflow %s' % (j + 1)))
fig = ff.create_gantt (df, index_col='Resource', show_colorbar=True, group_tasks=True, showgrid_x=True,
                       title='Workflow Schedule')
py.plot (fig, filename='DQN_workflow_scheduling', world_readable=True)
